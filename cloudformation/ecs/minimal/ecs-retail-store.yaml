AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Retail Store Sample Application'

Parameters:
  EnvironmentName:
    Type: String
    Default: ecs-retail-store
    Description: Name of the environment
  
  ContainerInsightsSetting:
    Type: String
    Default: enhanced
    AllowedValues: [enabled, enhanced, disabled]
    Description: Container Insights setting for ECS cluster
  
  OpenTelemetryEnabled:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable OpenTelemetry tracing

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: environment-name
          Value: !Ref EnvironmentName
        - Key: created-by
          Value: ecs-retail-store-sample-app

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref ContainerInsightsSetting

  # CloudWatch Log Group
  ECSTasksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-tasks
      RetentionInDays: 7

  # Service Discovery Namespace
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: retailstore.local
      Description: Service discovery namespace
      Vpc: !Ref VPC

  # Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  UITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-ui
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UITargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Task Security Group
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-task-execution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-task
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ECSTasksLogGroup}:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ecs/containerinsights/${EnvironmentName}*:*
        - PolicyName: ECSExec
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  # UI Service
  UITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-ui
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: ui-service
          Image: public.ecr.aws/aws-containers/retail-store-sample-ui:1.3.0
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: ui-service
          Environment:
            - Name: RETAIL_UI_ENDPOINTS_CATALOG
              Value: http://catalog
            - Name: RETAIL_UI_ENDPOINTS_CARTS
              Value: http://cart
            - Name: RETAIL_UI_ENDPOINTS_CHECKOUT
              Value: http://checkout
            - Name: RETAIL_UI_ENDPOINTS_ORDERS
              Value: http://orders
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/actuator/health || exit 1
            Interval: 10
            StartPeriod: 60
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ui-service

  UIService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: ui
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref UITaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt ServiceDiscoveryNamespace.Arn
        Services:
          - ClientAliases:
              - DnsName: ui
                Port: 80
            DiscoveryName: ui
            PortName: ui-service
      LoadBalancers:
        - TargetGroupArn: !Ref UITargetGroup
          ContainerName: ui-service
          ContainerPort: 8080

  # Catalog Service
  CatalogTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-catalog
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: catalog-service
          Image: public.ecr.aws/aws-containers/retail-store-sample-catalog:1.3.0
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: catalog-service
          Environment:
            - Name: RETAIL_CATALOG_PERSISTENCE_PROVIDER
              Value: in-memory
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 10
            StartPeriod: 60
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: catalog-service

  CatalogService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: catalog
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref CatalogTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt ServiceDiscoveryNamespace.Arn
        Services:
          - ClientAliases:
              - DnsName: catalog
                Port: 80
            DiscoveryName: catalog
            PortName: catalog-service

  # Cart Service
  CartTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-cart
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: cart-service
          Image: public.ecr.aws/aws-containers/retail-store-sample-cart:1.3.0
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: cart-service
          Environment:
            - Name: RETAIL_CART_PERSISTENCE_PROVIDER
              Value: in-memory
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/actuator/health || exit 1
            Interval: 10
            StartPeriod: 60
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: cart-service

  CartService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: cart
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref CartTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt ServiceDiscoveryNamespace.Arn
        Services:
          - ClientAliases:
              - DnsName: cart
                Port: 80
            DiscoveryName: cart
            PortName: cart-service

  # Checkout Service
  CheckoutTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-checkout
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: checkout-service
          Image: public.ecr.aws/aws-containers/retail-store-sample-checkout:1.3.0
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: checkout-service
          Environment:
            - Name: RETAIL_CHECKOUT_PERSISTENCE_PROVIDER
              Value: in-memory
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 10
            StartPeriod: 60
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: checkout-service

  CheckoutService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: checkout
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref CheckoutTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt ServiceDiscoveryNamespace.Arn
        Services:
          - ClientAliases:
              - DnsName: checkout
                Port: 80
            DiscoveryName: checkout
            PortName: checkout-service

  # Orders Service
  OrdersTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-orders
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: orders-service
          Image: public.ecr.aws/aws-containers/retail-store-sample-orders:1.3.0
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: orders-service
          Environment:
            - Name: RETAIL_CHECKOUT_PERSISTENCE_PROVIDER
              Value: in-memory
            - Name: RETAIL_ORDERS_MESSAGING_PROVIDER
              Value: in-memory
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/actuator/health || exit 1
            Interval: 10
            StartPeriod: 60
            Retries: 3
            Timeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTasksLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: orders-service

  OrdersService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: orders
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref OrdersTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt ServiceDiscoveryNamespace.Arn
        Services:
          - ClientAliases:
              - DnsName: orders
                Port: 80
            DiscoveryName: orders
            PortName: orders-service

Outputs:
  ApplicationURL:
    Description: URL of the retail store application
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
  
  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
  
  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
  
  PrivateSubnets:
    Description: Private subnet IDs
    Value: !Sub ${PrivateSubnet1},${PrivateSubnet2}
  
  PublicSubnets:
    Description: Public subnet IDs
    Value: !Sub ${PublicSubnet1},${PublicSubnet2}